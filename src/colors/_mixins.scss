@use 'sass:map';
@use 'sass:list';
@import './functions';

@mixin theme($property, $key, $inline-extra: null, $post-extra: null) {
  @each $theme in $themes {
    @if theme-exists($key, $theme) {
      $value: get-theme-value($key, $theme);

      :global(.#{$theme}) & {
        #{$property}: #{$inline-extra} #{$value} #{$post-extra};
        #{$property}: #{$inline-extra}
        var(--theme-#{$theme}-#{$key}, #{$value})
        #{$post-extra};
      }
    } @else {
      @error "Property '#{$key}' not found in theme '#{$theme}'";
    }
  }
}

@mixin generate-theme-mappings($theme-name, $new-theme-map) {
  $themes: list.append($themes, $theme-name, $separator: comma) !global;

  @each $key, $value in $new-theme-map {
    @if not map.has-key($theme-values, $key) {
      $theme-values: map.merge($theme-values,
        (
          $key: (
            $theme-name: $value,
          ),
        )
      ) !global;
    } @else {
      $existing-key-map: map.get($theme-values, $key);

      @if not map.get($existing-key-map, $theme-name) {
        $new-key-map: map.merge(
            $existing-key-map,
            (
              $theme-name: $value,
            )
        );
        $theme-values: map.merge($theme-values,
          (
            $key: $new-key-map,
          )
        ) !global;
      }
    }
  }
}

$default-theme: light;

@mixin generate-theme-variables {
  @each $theme in $themes {
    &.#{$theme} {
      @each $key, $val in $theme-values {
        @if theme-exists($key, $theme) {
          --#{$key}: #{get-theme-value($key, $theme)};
        }
      }
    }
  }

  @each $key, $val in $theme-values {
    @if theme-exists($key, $default-theme) {
      --#{$key}: #{get-theme-value($key, $default-theme)};
    }
  }
}
