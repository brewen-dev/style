@import './functions';

@mixin theme($property, $key, $inlineExtra: null, $postExtra: null) {
  @each $theme in $themes {
    @if (themeExists($key, $theme)) {
      $value: getThemeValue($key, $theme);

      :global(.#{$theme}) & {
        #{$property}: #{$inlineExtra} #{$value} #{$postExtra};
        #{$property}: #{$inlineExtra}
          var(--theme-#{$theme}-#{$key}, #{$value})
          #{$postExtra};
      }
    } @else {
      @error "Property '#{$key}' not found in theme '#{$theme}'";
    }
  }
}

@mixin generateThemeMappings($themeName, $newThemeMap) {
  $themes: append($themes, $themeName, $separator: comma) !global;

  @each $key, $value in $newThemeMap {
    @if not map-has-key($themeValues, $key) {
      $themeValues: map-merge(
        $themeValues,
        (
          $key: (
            $themeName: $value,
          ),
        )
      ) !global;
    } @else {
      $existingKeyMap: map-get($themeValues, $key);
      @if not map-get($existingKeyMap, $themeName) {
        $newKeyMap: map-merge(
          $existingKeyMap,
          (
            $themeName: $value,
          )
        );
        $themeValues: map-merge(
          $themeValues,
          (
            $key: $newKeyMap,
          )
        ) !global;
      }
    }
  }
}

$default-theme: light;

@mixin generateThemeVariables {
  @each $theme in $themes {
    &.#{$theme} {
      @each $key, $val in $themeValues {
        @if (themeExists($key, $theme)) {
          --#{$key}: #{getThemeValue($key, $theme)};
        }
      }
    }
  }

  @each $key, $val in $themeValues {
    @if (themeExists($key, $default-theme)) {
      --#{$key}: #{getThemeValue($key, $default-theme)};
    }
  }
}
